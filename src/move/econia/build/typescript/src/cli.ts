
import { AptosParserRepo, getTypeTagFullname, StructTag, parseTypeTagOrThrow, u8, u64, u128, strToU8, u8str, DummyCache } from "@manahippo/move-to-ts";
import { AptosAccount, AptosClient, HexString, Types } from "aptos";
import { Command } from "commander";
import { getProjectRepo } from "./";
import * as fs from "fs";
import * as yaml from "yaml";
import * as Econia$_ from './Econia';

export const readConfig = (program: Command) => {
  const {config, profile} = program.opts();
  const ymlContent = fs.readFileSync(config, {encoding: "utf-8"});
  const result = yaml.parse(ymlContent);
  //console.log(result);
  if (!result.profiles) {
    throw new Error("Expect a profiles to be present in yaml config");
  }
  if (!result.profiles[profile]) {
    throw new Error(`Expect a ${profile} profile to be present in yaml config`);
  }
  const url = result.profiles[profile].rest_url;
  const privateKeyStr = result.profiles[profile].private_key;
  if (!url) {
    throw new Error(`Expect rest_url to be present in ${profile} profile`);
  }
  if (!privateKeyStr) {
    throw new Error(`Expect private_key to be present in ${profile} profile`);
  }
  const privateKey = new HexString(privateKeyStr);
  const client = new AptosClient(result.profiles[profile].rest_url);
  const account = new AptosAccount(privateKey.toUint8Array());
  console.log(`Using address ${account.address().hex()}`);
  return {client, account};
}

export async function sendPayloadTx(
  client: AptosClient,
  account: AptosAccount,
  payload: Types.TransactionPayload,
  max_gas=1000
){
  const txnRequest = await client.generateTransaction(account.address(), payload, {max_gas_amount: `${max_gas}`});
  const signedTxn = await client.signTransaction(account, txnRequest);
  const txnResult = await client.submitTransaction(signedTxn);
  await client.waitForTransaction(txnResult.hash);
  const txDetails = (await client.getTransaction(txnResult.hash)) as Types.UserTransaction;
  console.log(txDetails);
}

const program = new Command();

program
  .name('move-ts-cli')
  .description('Move TS CLI generated by move-to-ts')
  .requiredOption('-c, --config <path>', 'path to your aptos config.yml (generated with "aptos init")')
  .option('-p, --profile <PROFILE>', 'aptos config profile to use', 'default')


const action_init_econia = async () => {
  const {client, account} = readConfig(program);

  const payload = Econia$_.Init$_.buildPayload_init_econia();
  await sendPayloadTx(client, account, payload);
}

program
  .command("init_econia")

  .action(action_init_econia);


const action_submit_market_buy = async (B: string, Q: string, E: string, host: string, requested_size: string, max_quote_to_spend: string) => {
  const {client, account} = readConfig(program);
  const B_ = parseTypeTagOrThrow(B);
  const Q_ = parseTypeTagOrThrow(Q);
  const E_ = parseTypeTagOrThrow(E);
  const host_ = new HexString(host);
  const requested_size_ = u64(requested_size);
  const max_quote_to_spend_ = u64(max_quote_to_spend);
  const payload = Econia$_.Match$_.buildPayload_submit_market_buy(host_, requested_size_, max_quote_to_spend_, [B_, Q_, E_]);
  await sendPayloadTx(client, account, payload);
}

program
  .command("submit_market_buy")
  .argument('<TYPE_B>')
  .argument('<TYPE_Q>')
  .argument('<TYPE_E>')
  .argument('<host>')
  .argument('<requested_size>')
  .argument('<max_quote_to_spend>')
  .action(action_submit_market_buy);


const action_submit_market_sell = async (B: string, Q: string, E: string, host: string, requested_size: string) => {
  const {client, account} = readConfig(program);
  const B_ = parseTypeTagOrThrow(B);
  const Q_ = parseTypeTagOrThrow(Q);
  const E_ = parseTypeTagOrThrow(E);
  const host_ = new HexString(host);
  const requested_size_ = u64(requested_size);
  const payload = Econia$_.Match$_.buildPayload_submit_market_sell(host_, requested_size_, [B_, Q_, E_]);
  await sendPayloadTx(client, account, payload);
}

program
  .command("submit_market_sell")
  .argument('<TYPE_B>')
  .argument('<TYPE_Q>')
  .argument('<TYPE_E>')
  .argument('<host>')
  .argument('<requested_size>')
  .action(action_submit_market_sell);


const action_swap_buy = async (B: string, Q: string, E: string, host: string, requested_size: string, max_quote_to_spend: string) => {
  const {client, account} = readConfig(program);
  const B_ = parseTypeTagOrThrow(B);
  const Q_ = parseTypeTagOrThrow(Q);
  const E_ = parseTypeTagOrThrow(E);
  const host_ = new HexString(host);
  const requested_size_ = u64(requested_size);
  const max_quote_to_spend_ = u64(max_quote_to_spend);
  const payload = Econia$_.Match$_.buildPayload_swap_buy(host_, requested_size_, max_quote_to_spend_, [B_, Q_, E_]);
  await sendPayloadTx(client, account, payload);
}

program
  .command("swap_buy")
  .argument('<TYPE_B>')
  .argument('<TYPE_Q>')
  .argument('<TYPE_E>')
  .argument('<host>')
  .argument('<requested_size>')
  .argument('<max_quote_to_spend>')
  .action(action_swap_buy);


const action_swap_sell = async (B: string, Q: string, E: string, host: string, requested_size: string) => {
  const {client, account} = readConfig(program);
  const B_ = parseTypeTagOrThrow(B);
  const Q_ = parseTypeTagOrThrow(Q);
  const E_ = parseTypeTagOrThrow(E);
  const host_ = new HexString(host);
  const requested_size_ = u64(requested_size);
  const payload = Econia$_.Match$_.buildPayload_swap_sell(host_, requested_size_, [B_, Q_, E_]);
  await sendPayloadTx(client, account, payload);
}

program
  .command("swap_sell")
  .argument('<TYPE_B>')
  .argument('<TYPE_Q>')
  .argument('<TYPE_E>')
  .argument('<host>')
  .argument('<requested_size>')
  .action(action_swap_sell);


const action_register_market = async (B: string, Q: string, E: string) => {
  const {client, account} = readConfig(program);
  const B_ = parseTypeTagOrThrow(B);
  const Q_ = parseTypeTagOrThrow(Q);
  const E_ = parseTypeTagOrThrow(E);
  const payload = Econia$_.Registry$_.buildPayload_register_market([B_, Q_, E_]);
  await sendPayloadTx(client, account, payload);
}

program
  .command("register_market")
  .argument('<TYPE_B>')
  .argument('<TYPE_Q>')
  .argument('<TYPE_E>')
  .action(action_register_market);


const action_cancel_ask = async (B: string, Q: string, E: string, host: string, id: string) => {
  const {client, account} = readConfig(program);
  const B_ = parseTypeTagOrThrow(B);
  const Q_ = parseTypeTagOrThrow(Q);
  const E_ = parseTypeTagOrThrow(E);
  const host_ = new HexString(host);
  const id_ = u128(id);
  const payload = Econia$_.User$_.buildPayload_cancel_ask(host_, id_, [B_, Q_, E_]);
  await sendPayloadTx(client, account, payload);
}

program
  .command("cancel_ask")
  .argument('<TYPE_B>')
  .argument('<TYPE_Q>')
  .argument('<TYPE_E>')
  .argument('<host>')
  .argument('<id>')
  .action(action_cancel_ask);


const action_cancel_bid = async (B: string, Q: string, E: string, host: string, id: string) => {
  const {client, account} = readConfig(program);
  const B_ = parseTypeTagOrThrow(B);
  const Q_ = parseTypeTagOrThrow(Q);
  const E_ = parseTypeTagOrThrow(E);
  const host_ = new HexString(host);
  const id_ = u128(id);
  const payload = Econia$_.User$_.buildPayload_cancel_bid(host_, id_, [B_, Q_, E_]);
  await sendPayloadTx(client, account, payload);
}

program
  .command("cancel_bid")
  .argument('<TYPE_B>')
  .argument('<TYPE_Q>')
  .argument('<TYPE_E>')
  .argument('<host>')
  .argument('<id>')
  .action(action_cancel_bid);


const action_deposit = async (B: string, Q: string, E: string, b_val: string, q_val: string) => {
  const {client, account} = readConfig(program);
  const B_ = parseTypeTagOrThrow(B);
  const Q_ = parseTypeTagOrThrow(Q);
  const E_ = parseTypeTagOrThrow(E);
  const b_val_ = u64(b_val);
  const q_val_ = u64(q_val);
  const payload = Econia$_.User$_.buildPayload_deposit(b_val_, q_val_, [B_, Q_, E_]);
  await sendPayloadTx(client, account, payload);
}

program
  .command("deposit")
  .argument('<TYPE_B>')
  .argument('<TYPE_Q>')
  .argument('<TYPE_E>')
  .argument('<b_val>')
  .argument('<q_val>')
  .action(action_deposit);


const action_init_containers = async (B: string, Q: string, E: string) => {
  const {client, account} = readConfig(program);
  const B_ = parseTypeTagOrThrow(B);
  const Q_ = parseTypeTagOrThrow(Q);
  const E_ = parseTypeTagOrThrow(E);
  const payload = Econia$_.User$_.buildPayload_init_containers([B_, Q_, E_]);
  await sendPayloadTx(client, account, payload);
}

program
  .command("init_containers")
  .argument('<TYPE_B>')
  .argument('<TYPE_Q>')
  .argument('<TYPE_E>')
  .action(action_init_containers);


const action_init_user = async () => {
  const {client, account} = readConfig(program);

  const payload = Econia$_.User$_.buildPayload_init_user();
  await sendPayloadTx(client, account, payload);
}

program
  .command("init_user")

  .action(action_init_user);


const action_submit_ask = async (B: string, Q: string, E: string, host: string, price: string, size: string) => {
  const {client, account} = readConfig(program);
  const B_ = parseTypeTagOrThrow(B);
  const Q_ = parseTypeTagOrThrow(Q);
  const E_ = parseTypeTagOrThrow(E);
  const host_ = new HexString(host);
  const price_ = u64(price);
  const size_ = u64(size);
  const payload = Econia$_.User$_.buildPayload_submit_ask(host_, price_, size_, [B_, Q_, E_]);
  await sendPayloadTx(client, account, payload);
}

program
  .command("submit_ask")
  .argument('<TYPE_B>')
  .argument('<TYPE_Q>')
  .argument('<TYPE_E>')
  .argument('<host>')
  .argument('<price>')
  .argument('<size>')
  .action(action_submit_ask);


const action_submit_bid = async (B: string, Q: string, E: string, host: string, price: string, size: string) => {
  const {client, account} = readConfig(program);
  const B_ = parseTypeTagOrThrow(B);
  const Q_ = parseTypeTagOrThrow(Q);
  const E_ = parseTypeTagOrThrow(E);
  const host_ = new HexString(host);
  const price_ = u64(price);
  const size_ = u64(size);
  const payload = Econia$_.User$_.buildPayload_submit_bid(host_, price_, size_, [B_, Q_, E_]);
  await sendPayloadTx(client, account, payload);
}

program
  .command("submit_bid")
  .argument('<TYPE_B>')
  .argument('<TYPE_Q>')
  .argument('<TYPE_E>')
  .argument('<host>')
  .argument('<price>')
  .argument('<size>')
  .action(action_submit_bid);


const action_withdraw = async (B: string, Q: string, E: string, b_val: string, q_val: string) => {
  const {client, account} = readConfig(program);
  const B_ = parseTypeTagOrThrow(B);
  const Q_ = parseTypeTagOrThrow(Q);
  const E_ = parseTypeTagOrThrow(E);
  const b_val_ = u64(b_val);
  const q_val_ = u64(q_val);
  const payload = Econia$_.User$_.buildPayload_withdraw(b_val_, q_val_, [B_, Q_, E_]);
  await sendPayloadTx(client, account, payload);
}

program
  .command("withdraw")
  .argument('<TYPE_B>')
  .argument('<TYPE_Q>')
  .argument('<TYPE_E>')
  .argument('<b_val>')
  .argument('<q_val>')
  .action(action_withdraw);


program.parse();
